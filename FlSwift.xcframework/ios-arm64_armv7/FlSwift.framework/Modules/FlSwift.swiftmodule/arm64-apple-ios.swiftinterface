// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FlSwift
@_exported import FlSwift
import Foundation
import Swift
import _Concurrency
@_hasMissingDesignatedInitializers final public class Dispatcher<A> where A : FlSwift.Action {
  public static var shared: FlSwift.Dispatcher<A> {
    get
  }
  final public func register<T>(for type: T.Type, callback: @escaping (A) -> Swift.Void) -> Swift.String
  final public func unRegister(key: Swift.String)
  final public func dispatch(_ action: A)
  @objc deinit
}
public protocol Action {
}
public protocol State {
  associatedtype ActionType : FlSwift.Action
  func reduce(action: Self.ActionType)
}
public protocol MiddlewareType {
  func observe<StateType>(store: FlSwift.Store<StateType>) where StateType : FlSwift.State
}
open class Store<StateType> where StateType : FlSwift.State {
  final public let state: StateType
  public func subscribe()
  public func unSubscribe()
  public func register(middlewares: [FlSwift.MiddlewareType])
  public var lastDispatchedaAtionHandler: ((_ stateType: StateType, _ lastDispatchedaAtion: StateType.ActionType?) -> Swift.Void)?
  public init(state: StateType, dispatcher: FlSwift.Dispatcher<StateType.ActionType> = Dispatcher<StateType.ActionType>.shared)
  @objc deinit
}
